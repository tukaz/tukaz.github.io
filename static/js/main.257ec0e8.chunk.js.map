{"version":3,"sources":["components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","constants/weatherState.js","components/WeatherLocation/WeatherData/index.js","services/getURLWeatherLocation.js","constants/api_weather.js","services/transformWeather.js","components/WeatherLocation/Location.js","components/WeatherLocation/index.js","components/LocationList.js","components/ForecastItem/index.js","components/ForecastExtended.js","App.js","serviceWorker.js","index.js"],"names":["WeatherExtraInfo","_ref","humidity","wind","react_default","a","createElement","className","concat","icons","_icons","Object","defineProperty","WeatherTemperature","temperature","weatherState","icon","lib_default","name","size","getWeatherIcon","WeatherData","_ref$data","data","WeatherData_WeatherTemperature","WeatherData_WeatherExtraInfo","propType","PropTypes","shape","number","isRequired","string","getURLWeatherLocation","city","getTemp","temp","parseInt","convert","from","to","toFixed","getWeatherState","weather","id","transData","weatherData","_weatherData$main","main","speed","Location","WeatherLocation","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","API_WEATHER","state","fetch","then","resolve","json","newData","setState","prevProps","prevState","_this$state","onWeatherLocationClick","onClick","WeatherLocation_Location","WeatherLocation_WeatherData","CircularProgress","Component","LocationList","cities","onSelectedLocation","map","index","components_WeatherLocation","key","handleLocationClick","strToComponents","ForecastItem","weekDay","hour","ForecastExtended","forecastData","_this2","getURLWeatherForecast","foreCastData","newForecastData","filter","item","moment","unix","dt","format","match","dtForecast","date","day","toUpperCase","updateForecastItem","nextProp","components_ForecastItem","renderForecastItems","renderProgress","App","handleSelectedLocation","selectedCity","react_flexbox_grid_lib","xs","AppBar","position","Toolbar","Typography","variant","color","md","components_LocationList","Paper","elevation","components_ForecastExtended","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.257ec0e8.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './style.css';\n\nconst WeatherExtraInfo = ({humidity, wind}) => (\n    <div className=\"weatherExtraInfoCont\">\n        <span className=\"extraInfoText\">{`Humedad: ${humidity}%`}</span>\n        <span className=\"extraInfoText\">{`Viento: ${wind}`}</span>\n    </div>\n);\n\nWeatherExtraInfo.propTypes = {\n    humidity: PropTypes.number,\n    wind: PropTypes.number.isRequired,\n}\n\nexport default WeatherExtraInfo;","import React from 'react';\nimport WeatherIcons from 'react-weathericons';\nimport PropTypes from 'prop-types';\nimport {\n    SUN,\n    CLOUD,\n    DRIZZLE,\n    RAIN,\n    SNOW,\n    THUNDER\n} from '../../../constants/weatherState'\nimport './style.css';\n\nconst icons = {\n    [SUN]:'day-sunny',\n    [CLOUD]:'cloud',\n    [RAIN]:'rain',\n    [DRIZZLE]: 'day-showers',\n    [THUNDER]: 'day-thunderstorm',\n    [SNOW]: 'snow'\n}\n\nconst getWeatherIcon = weatherState => {\n    const icon = icons[weatherState];\n    const size = '3x';\n\n    return (<WeatherIcons className=\"wicon\" name={(icon) ? icon : 'day-sunny'} size={size} />)\n}\n\nconst WeatherTemperature = ({temperature,weatherState}) => {\n    return (\n        <div className=\"weatherTemperatureCont\">\n            {\n                getWeatherIcon(weatherState)\n            }\n            <span className=\"temperature\">{`${temperature}`}</span>\n            <span className=\"temperatureType\">Â°C</span>\n        </div> \n    );\n}\n\nWeatherTemperature.propTypes = {\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired\n};\n\n\nexport default WeatherTemperature;","export const CLOUD = 'cloud';\nexport const SUN = 'sun';\nexport const RAIN = 'rain';\nexport const SNOW = 'snow';\nexport const THUNDER = 'thunder';\nexport const DRIZZLE = 'drizzle';","import React from 'react';\nimport WeatherExtraInfo from './WeatherExtraInfo';\nimport WeatherTemperature from './WeatherTemperature';\nimport PropTypes from 'prop-types';\nimport './style.css';\n\nconst WeatherData = ({data : { temperature, humidity, wind, weatherState } }) => {\n    return(\n        <div className=\"weatherDataCont\">\n            <WeatherTemperature temperature={temperature} weatherState={weatherState}/>\n            <WeatherExtraInfo humidity={humidity} wind={wind} />\n        </div>\n    );\n\n}\n\nWeatherData.propType = {\n    data : PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.number.isRequired,\n        weatherState: PropTypes.string.isRequired,\n    })\n}\n\nexport default WeatherData;","import {API_WEATHER_BASE_URL} from './../constants/api_weather'\nimport {API_WEATHER_FORECAST_URL} from './../constants/api_weather'\nimport {API_WEATHER_KEY} from './../constants/api_weather'\n\nexport const getURLWeatherLocation = city => {\n    return `${API_WEATHER_BASE_URL}?q=${city}&appid=${API_WEATHER_KEY}`\n}\n\nexport const getURLWeatherForecast = city => {\n    return `${API_WEATHER_FORECAST_URL}?q=${city}&appid=${API_WEATHER_KEY}`\n}\n","export const API_WEATHER_KEY = '55fdb077b9665f80b70e061e5be0d251';\nexport const API_WEATHER_BASE_URL = 'http://api.openweathermap.org/data/2.5/weather';\nexport const API_WEATHER_FORECAST_URL = 'http://api.openweathermap.org/data/2.5/forecast';\n","\nimport convert from 'convert-units';\nimport 'moment/locale/es';\nimport moment from 'moment';\n\nimport {\n    SUN,\n    CLOUD,\n    DRIZZLE,\n    RAIN,\n    SNOW,\n    THUNDER\n} from '../constants/weatherState'\n\nconst getTemp = temp => {\n        return parseInt(convert(temp).from('K').to('C').toFixed(0));\n    }\n\nconst getWeatherState = (weather) => {\n    const {id} = weather;\n    if(id < 300){\n        return THUNDER;\n    } else if(id < 400){\n        return DRIZZLE\n    } else if(id < 600){\n        return RAIN;\n    } else if( id < 700){\n        return SNOW;\n    } else if( id < 800){\n        return SUN;\n    } else {\n        return CLOUD;\n    }\n}\n\nexport const transData = (weatherData) => {\n        const {temp,humidity} = weatherData.main;\n        const {wind} = weatherData;\n        const data = {\n            humidity: humidity,\n            temperature: getTemp(temp),\n            wind: wind.speed,\n            weatherState: getWeatherState(weatherData.weather[0])\n        }\n\n        return data;\n    }\n\nexport const transForecast = (forecastData) => {\n    return forecastData['list']\n    .filter( (item) => {\n       return moment.unix(item.dt).format('HH').match('06|12|18');\n    })\n    .map( (item) => {\n        const dtForecast = moment.unix(item.dt);\n        return (\n            {\n                date : item.dt,\n                day : dtForecast.format('dddd').toUpperCase(),\n                hour: dtForecast.format('HH:mm'),\n                data : transData(item)            \n            }             \n        )\n    });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\n\nconst Location = ({city}) => {\n    return (\n        <div className=\"locationCont\">\n            <h1>{city}</h1>\n        </div>\n    )\n}\n  \nLocation.propTypes = {\n    city: PropTypes.string.isRequired,\n}\n\n\nexport default Location;","import React, {Component} from 'react';\nimport {CircularProgress} from '@material-ui/core';\nimport {PropTypes} from 'prop-types';\nimport WeatherData from './WeatherData';\nimport {getURLWeatherLocation} from '../../services/getURLWeatherLocation';\nimport {transData} from '../../services/transformWeather';\nimport Location from './Location';\nimport './style.css';\n\nclass WeatherLocation extends Component {\n\n    constructor(props) {\n        super(props);\n        const {city} = props;\n        this.state = {\n            city,\n            data: null,\n        }\n    }                                                                    \n\n    componentDidMount() {\n        this.handleClick();\n    }\n \n    componentDidUpdate(prevProps, prevState) {\n        \n    }                \n    \n    \n\n    handleClick = () => {\n        const API_WEATHER = getURLWeatherLocation(this.state.city);\n        fetch(API_WEATHER).then(\n            resolve => resolve.json()\n        ).then( weatherData => {\n            const newData = transData(weatherData);\n            this.setState({\n                city: this.state.city,\n                data: newData\n            });  \n        })\n    }\n\n    render(){\n        const {city, data} = this.state;\n        const {onWeatherLocationClick} = this.props;\n        return(\n            <div className=\"weatherLocationCont\" onClick={onWeatherLocationClick} >\n                <Location city={city} />\n                { \n                    data ? \n                    <WeatherData data={data} /> :\n                    <CircularProgress />\n                }\n            </div>\n        )\n    }\n}\n\nWeatherLocation.propTypes = {\n    city: PropTypes.string.isRequired,\n    onWeatherLocationClick: PropTypes.func,\n}\n\nexport default WeatherLocation;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherLocation from './WeatherLocation/';\nimport './style.css'\n\n\n\nconst LocationList = ({cities,onSelectedLocation}) => {\n\n    const handleLocationClick = (city) => {\n        onSelectedLocation(city);\n    };\n    \n    const strToComponents = cities => (\n        cities.map( (city,index ) => {\n            return (\n                <WeatherLocation \n                    key={index} \n                    city={city} \n                    onWeatherLocationClick={()=> {handleLocationClick(city)}}\n                />\n            )\n        })\n    );\n\n    return (\n        <div className=\"locationList\">\n            { strToComponents(cities) }\n        </div>\n    );\n\n}\n\nLocationList.propTypes = {\n    cities : PropTypes.array.isRequired,\n    onSelectedLocation: PropTypes.func.isRequired\n}\n\nexport default LocationList;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './style.css';\nimport WeatherData from '../WeatherLocation/WeatherData';\n\nconst ForecastItem = ({weekDay, hour, data}) => (\n    <div className=\"forecastItemsWrapper\">\n        <div className=\"forecastItemDate\">{weekDay} - {hour} hs</div>\n        <WeatherData data={data} />\n    </div>\n)\n\nForecastItem.propTypes = {\n    weekDay : PropTypes.string.isRequired,\n}\n\nexport default ForecastItem;","import React, {Component} from 'react';\nimport Proptypes from 'prop-types';\nimport {CircularProgress} from '@material-ui/core';\nimport {getURLWeatherForecast} from '../services/getURLWeatherLocation'\nimport {transForecast} from '../services/transformWeather'\nimport ForecastItem from './ForecastItem'\nimport './style.css';\n\nclass ForecastExtended extends Component {\n\n    constructor(){\n        super();\n        this.state = {\n            forecastData : null\n        }\n    }\n\n    updateForecastItem(city){\n        const API_WEATHER = getURLWeatherForecast(city);\n        fetch(API_WEATHER).then(\n            resolve => resolve.json()\n        ).then( foreCastData => {\n            const newForecastData = transForecast(foreCastData);\n            this.setState({\n                forecastData: newForecastData\n            });  \n        })\n\n    }\n\n    componentDidMount() {\n        this.updateForecastItem(this.props.city);\n    }\n\n    componentWillReceiveProps(nextProp){\n        if(nextProp.city !== this.props.city){\n            this.setState({forecastData : null});\n            this.updateForecastItem(nextProp.city);\n\n        }\n    }\n    \n\n    renderForecastItems(){\n        const forecastItems = this.state.forecastData;\n        return (\n            forecastItems.map( (day) => {\n                return (\n                    <ForecastItem \n                        key={`${day.day}${day.hour}`} \n                        weekDay={day.day} \n                        hour={day.hour} \n                        data={day.data}\n                    />\n                )\n            })\n        );\n\n    }\n\n    renderProgress(){\n        return(\n            <CircularProgress/>\n        )   \n    }\n\n    render(){\n\n        const {forecastData} = this.state;\n        return(\n            <div>\n                <h2>{this.props.city}</h2>\n                { \n                    forecastData ?\n                    this.renderForecastItems() :\n                    this.renderProgress()\n                }\n            </div>\n        );\n    }\n}\n\nForecastExtended.propTypes = {\n    city : Proptypes.string,\n}\n\nexport default ForecastExtended;","import React, { Component } from 'react';\nimport './App.scss';\nimport Paper from '@material-ui/core/Paper'\nimport AppBar from '@material-ui/core/AppBar'\nimport Typography from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport LocationList from './components/LocationList';\nimport {Grid,Row,Col} from 'react-flexbox-grid';\nimport ForecastExtended from './components/ForecastExtended';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      selectedCity : null\n    }\n  }\n\n\n  handleSelectedLocation = (city) => {\n    this.setState({\n      selectedCity : city\n    });\n  }\n\n  render() {\n  \n    const {selectedCity} = this.state;\n    const cities = [\n      'Buenos Aires',\n      'Lima',\n      'Moscu'\n    ];\n\n\n    return (\n      <Grid>\n        <Row>\n          <Col xs={12}>\n            <AppBar position=\"sticky\">\n              <Toolbar>\n                <Typography variant=\"subtitle1\" color=\"inherit\">\n                  Weather App 2\n                </Typography>\n              </Toolbar>\n            </AppBar>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12} md={6}>\n            <LocationList cities={cities} onSelectedLocation={this.handleSelectedLocation} />\n          </Col>\n          <Col xs={12} md={6}>\n            <Paper elevation={5}>\n              <div className=\"details\">\n                {\n                  selectedCity &&\n                  <ForecastExtended city={selectedCity} />\n                }\n              </div>\n            </Paper>\n          </Col>\n        </Row>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}